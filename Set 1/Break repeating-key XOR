import numbers
import base64
# cook your dish here
def bruteforce_single_char_xor(ciphertext):
    potential_messages = []
    for key_value in range(256):
        message = single_char_xor(ciphertext, key_value)
        score = get_english_score(message)
        data = {
            'message': message,
            'score': score,
            'key': key_value
            }
        potential_messages.append(data)
    return sorted(potential_messages, key=lambda x: x['score'], reverse=True)[0]
def single_char_xor(input_bytes, char_value):
    output_bytes = b''
    for byte in input_bytes:
        output_bytes += bytes([byte ^ char_value])
    return output_bytes
def get_english_score(input_bytes):
    character_frequencies = {
        'a': .08167, 'b': .01492, 'c': .02782, 'd': .04253,
        'e': .12702, 'f': .02228, 'g': .02015, 'h': .06094,
        'i': .06094, 'j': .00153, 'k': .00772, 'l': .04025,
        'm': .02406, 'n': .06749, 'o': .07507, 'p': .01929,
        'q': .00095, 'r': .05987, 's': .06327, 't': .09056,
        'u': .02758, 'v': .00978, 'w': .02360, 'x': .00150,
        'y': .01974, 'z': .00074, ' ': .13000
    }
    return sum([character_frequencies.get(chr(byte), 0) for byte in input_bytes.lower()])
def infunk(input_bytes_1, input_bytes_2):
    hamming_distance = 0
    for b1, b2 in zip(input_bytes_1, input_bytes_2):
        difference = b1 ^ b2
        hamming_distance += sum([1 for bit in bin(difference) if bit == '1'])
    return hamming_distance
with open('6.txt') as input_file:
    cypertext=base64.b64decode(input_file.read())
fd=[]
for keysize in range(2,41):
    distance=[]
    chunk=[cypertext[i:i+keysize] for i in range(0,len(cypertext),keysize)]
    while True:
            try: 
                chunk1 = chunk[0]
                chunk2 = chunk[1]
                h = infunk(chunk1, chunk2)
                distance.append(h/keysize)
                del chunk[0]
                del chunk[1]
            except Exception as e:
                break
    data={
    'key':keysize,
    'adis':sum(distance)/len(distance)
    }
    fd.append(data)
mks=sorted(fd,key=lambda x:x['adis'])[0]
kl=mks['key']
print(kl)
pkey=b""
for j in range(kl):
    block=b""
    for i in range(j,len(cypertext),kl):
        block+=bytes([cypertext[i]])
    pkey += bytes([bruteforce_single_char_xor(block)['key']])
pans=b""
j=0
for i in cypertext:
    pans+=bytes([i^pkey[j]])
    j+=1
    if j==len(pkey):
        j=0
print(pans)
